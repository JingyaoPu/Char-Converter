{"version":3,"sources":["logo.svg","App.js","CharConverter.js","Login.js","serviceWorker.js","index.js"],"names":["module","exports","App","scaleNames","React","Component","Chars","Ints","toChar","ints","intList","trim","split","charsString","i","charCodeAt","String","fromCharCode","toInt","chars","intsString","ascii","map","itm","c","tryConvert","value","convert","TemperatureInput","props","handleChange","bind","e","this","onValueChange","target","scale","onChange","Calculator","handleCharChange","handleIntChange","state","setState","Boolean","window","location","hostname","match","cal","Container","Row","Col","sm","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,4KCyB5BC,I,2CCvBTC,GCAcC,IAAMC,UDAP,CACfC,MAAO,aACPC,KAAM,SAGR,SAASC,EAAOC,GACd,IAAIC,EAAUD,EAAKE,OAAOC,MAAM,KAC5BC,EAAc,GAFE,uBAGpB,YAAcH,EAAd,+CAAsB,CAAC,IAAdI,EAAa,SACbA,GAAG,IAAIC,WAAW,GAAKD,GAAG,IAAIC,WAAW,IAAQD,GAAG,IAAIC,WAAW,GAAKD,GAAG,IAAIC,WAAW,MAC3FF,GAAeG,OAAOC,aAAaH,KALvB,kFAOpB,OAAOD,EAGT,SAASK,EAAMC,GACb,IAAIC,EAAa,GACbC,EAAOF,EAAMR,OAAOC,MAAM,IAAIU,KAAI,SAASC,GAC3C,OAAKA,GAAK,IAAMA,GAAK,KAASA,GAAK,IAAMA,GAAK,IACnCA,EAAIR,WAAW,GACnB,QALS,uBAOpB,YAAcM,EAAd,+CAAoB,CAAC,IAAZG,EAAW,QACZA,IACAJ,GAAcI,EAAE,MATJ,kFAWpB,OAAOJ,EAGT,SAASK,EAAWC,EAAOC,GACzB,OAAOA,EAAQD,G,IAIXE,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,0EAKNC,GACXC,KAAKJ,MAAMK,cAAcF,EAAEG,OAAOT,S,+BAIlC,IAAMA,EAAQO,KAAKJ,MAAMH,MACnBU,EAAQH,KAAKJ,MAAMO,MACzB,OACE,kCACE,gCAASjC,EAAWiC,GAApB,KACA,2BAAOV,MAAOA,EACPW,SAAUJ,KAAKH,oB,GAjBC1B,IAAMC,WA6DtBiC,E,YArCb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,iBAAmB,EAAKA,iBAAiBR,KAAtB,gBACxB,EAAKS,gBAAkB,EAAKA,gBAAgBT,KAArB,gBACvB,EAAKU,MAAQ,CAACf,MAAO,GAAIU,MAAO,KAJf,E,8EAOFV,GACfO,KAAKS,SAAS,CAACN,MAAO,IAAKV,Y,sCAGbA,GACdO,KAAKS,SAAS,CAACN,MAAO,IAAKV,Y,+BAI3B,IAAMU,EAAQH,KAAKQ,MAAML,MACnBV,EAAQO,KAAKQ,MAAMf,MACnBjB,EAAiB,MAAV2B,EAAgBX,EAAWC,EAAOR,GAASQ,EAClDP,EAAkB,MAAViB,EAAgBX,EAAWC,EAAOlB,GAAUkB,EAE1D,OACE,6BACE,kBAAC,EAAD,CACEU,MAAM,QACNV,MAAOP,EACPe,cAAeD,KAAKM,mBACtB,kBAAC,EAAD,CACEH,MAAM,OACNV,MAAOjB,EACPyB,cAAeD,KAAKO,uB,GA/BLpC,IAAMC,WE/CbsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCPAC,EACF,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAE,GAAC,kBAAC,EAAD,OACR,kBAACD,EAAA,EAAD,CAAKC,IAAE,GAAC,kBAAC,EAAD,QAEZ,6BACA,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAE,GAAC,kBAAC,EAAD,OACR,kBAACD,EAAA,EAAD,CAAKC,IAAE,GAAC,kBAAC,EAAD,SAKpBC,IAASC,OAAON,EAAKO,SAASC,eAAe,SDwGvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0ff22b54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react'\r\n\r\nconst scaleNames = {\r\n    Chars: 'Characters',\r\n    Ints: 'Ints'\r\n  };\r\n  \r\n  function toChar(ints) {\r\n    var intList = ints.trim().split(' ');\r\n    var charsString = '';\r\n    for (var i of intList){\r\n        if ((i>='a'.charCodeAt(0) & i<='z'.charCodeAt(0)) ||  i>='A'.charCodeAt(0) & i<='Z'.charCodeAt(0))\r\n            charsString += String.fromCharCode(i);\r\n    }\r\n    return charsString;\r\n  }\r\n  \r\n  function toInt(chars) {\r\n    var intsString = '';\r\n    var ascii= chars.trim().split('').map(function(itm){\r\n        if ((itm>='a' & itm<='z') ||  itm>='A' & itm<='Z')\r\n            return itm.charCodeAt(0);\r\n        return null;\r\n    });\r\n    for (var c of ascii){ \r\n        if (c)\r\n            intsString += c+' ';\r\n    }\r\n    return intsString;\r\n  }\r\n  \r\n  function tryConvert(value, convert) {\r\n    return convert(value);\r\n  }\r\n  \r\n  \r\n  class TemperatureInput extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleChange = this.handleChange.bind(this);\r\n    }\r\n  \r\n    handleChange(e) {\r\n      this.props.onValueChange(e.target.value);\r\n    }\r\n  \r\n    render() {\r\n      const value = this.props.value;\r\n      const scale = this.props.scale;\r\n      return (\r\n        <fieldset>\r\n          <legend>{scaleNames[scale]}:</legend>\r\n          <input value={value}\r\n                 onChange={this.handleChange} />\r\n        </fieldset>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Calculator extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleCharChange = this.handleCharChange.bind(this);\r\n      this.handleIntChange = this.handleIntChange.bind(this);\r\n      this.state = {value: '', scale: 'c'};\r\n    }\r\n  \r\n    handleCharChange(value) {\r\n      this.setState({scale: 'c', value});\r\n    }\r\n  \r\n    handleIntChange(value) {\r\n      this.setState({scale: 'i', value});\r\n    }\r\n  \r\n    render() {\r\n      const scale = this.state.scale;\r\n      const value = this.state.value;\r\n      const ints = scale === 'c' ? tryConvert(value, toInt) : value;\r\n      const chars = scale === 'i' ? tryConvert(value, toChar) : value;\r\n  \r\n      return (\r\n        <div>\r\n          <TemperatureInput\r\n            scale=\"Chars\"\r\n            value={chars}\r\n            onValueChange={this.handleCharChange} />\r\n          <TemperatureInput\r\n            scale=\"Ints\"\r\n            value={ints}\r\n            onValueChange={this.handleIntChange} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  \r\n  export default Calculator","import React from 'react'\r\n\r\nclass Login extends React.Component{\r\n    constructor(p){\r\n        super(p);\r\n        this.state = {isLogin:p.isLogin};\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    handleClick(){\r\n        this.setState((preState)=>({isLogin:!preState.isLogin}));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <button onClick = {this.handleClick}>\r\n                {this.state.isLogin? 'Sign out':'Sign in'}\r\n            </button>\r\n        )\r\n    }\r\n\r\n}\r\n  \r\n \r\n\r\n  export default Login;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './Login';\nimport Calculator from './CharConverter'\nimport * as serviceWorker from './serviceWorker';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nconst cal = (\n    <Container>\n        <Row>\n            <Col sm><Calculator/></Col>\n            <Col sm><Calculator/></Col>\n        </Row>\n        <br/>\n        <Row>\n            <Col sm><Calculator/></Col>\n            <Col sm><Calculator/></Col>\n        </Row>\n    </Container>\n)\n\nReactDOM.render(cal, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}